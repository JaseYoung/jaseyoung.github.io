{"componentChunkName":"component---src-templates-blog-template-js","path":"/setup/macbook","result":{"data":{"markdownRemark":{"id":"478568ad-1471-5cb9-99e4-1cb871bdd08e","html":"<p>This guide helps to setup a macbook from fresh install, to being able to develop. The guide is aimed towards a test developer. install shell dependancies and setup tools for browser manipulation.</p>\n<hr>\n<h2>Xcode</h2>\n<p>xcode-select —install</p>\n<h2>Homebrew</h2>\n<pre><code class=\"language-bash\">/usr/bin/ruby -e “$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)”\n</code></pre>\n<pre><code class=\"language-bash\">brew install \\\ngeckodriver \\\nawscli \\\ncircleci \\\ncmake \\\ngit \\\nthefuck \\\nzsh \\\n</code></pre>\n<pre><code class=\"language-bash\">brew tap homebrew/cask-cask\n</code></pre>\n<pre><code class=\"language-bash\">brew cask install \\\nchromedriver \\\n1password \\\nalfred \\\nbrave-browser \\\nfirefox \\\ngoogle-chrome \\\niterm2 \\\nspectacle \\\nvisual-studio-code \\\nrubymine \\\nfork \\\nspotify \\\nmtmr \\\n</code></pre>\n<hr>\n<h2>Fonts</h2>\n<p>Install <em>Dank Mono</em> latest <a href=\"https://dank.sh/releases/\">release</a></p>\n<hr>\n<h2>iTerm2</h2>\n<p>Change Preferences</p>\n<ul>\n<li>Profiles > General > Working Directory > Check <em>Reuse previous session’s directory</em></li>\n<li>Colors > Color Presets > Import… > <em>Find iterm2-night-owl</em> ( <a href=\"https://github.com/nickcernis/iterm2-night-owl\">Night Owl theme</a> )</li>\n<li>Text > Font > Change Font > <em>Find Dank Mono</em></li>\n<li>Appearance > Tabs > Check <em>Strech tabs to fill bar</em></li>\n</ul>\n<hr>\n<h2>ZSH shell</h2>\n<p>Installation if you already haven’t</p>\n<pre><code class=\"language-bash\">brew install zsh\n</code></pre>\n<p>Once installed we need to make it the default shell first we add it to the accepted shells</p>\n<pre><code class=\"language-bash\">echo “/usr/local/bin/zsh” | sudo tee -a /etc/shells\n</code></pre>\n<p>then we can make <em>zsh</em> our default shell</p>\n<pre><code class=\"language-bash\">chsh -s /usr/local/bin/zsh\n</code></pre>\n<h3>Oh My Zsh</h3>\n<pre><code class=\"language-bash\">sh -c \"$(curl -fsSL https://raw.githubusercontent.com/robbyrussell/oh-my-zsh/master/tools/install.sh)\"\n</code></pre>\n<h3>Theme</h3>\n<p>Darcula</p>\n<p><a href=\"https://iterm2colorschemes.com/\">Iterm Themes - Color Schemes and Themes for Iterm2</a></p>\n<h2>Git</h2>\n<p>Git huh? What a tool</p>\n<pre><code>brew install git\n</code></pre>\n<p>Next if you’ve got one copy over .gitconfig; no? Then add your user name and email to it by doing the following</p>\n<pre><code>git config —global user.name “Your Name Here”\n\ngit config —global user.email “your_email@youremail.com”\n</code></pre>\n<p>Additional configuration</p>\n<pre><code># Make sure your credential helper is configured, to avoid being asked for your password all the time\n\ngit config —global credential.helper osxkeychain\n\n# disable fastforward in merging\ngit config —global —add merge.ff false\n</code></pre>\n<hr>\n<h2>SSH Config for Github</h2>\n<p>The next part is straight from the offical documentation.</p>\n<h3>CHECK FOR EXISTING SSH KEYS</h3>\n<p>First, we need to check for existing SSH keys on your computer. We do this by running:</p>\n<pre><code># Lists the files in your .ssh directory, if they exist\nls -al ~/.ssh\n</code></pre>\n<p>Check the directory listing to see if you have files named either id<em>rsa.pub or id</em>dsa.pub. If you don’t have either of those files then read on, otherwise skip the next section.</p>\n<h3>GENERATE A NEW SSH KEY</h3>\n<p>If you don’t have an SSH key you need to generate one. To do that you need to run the commands below, and make sure to substitute the placeholder with your email. The default settings are preferred, so when you’re asked to “enter a file in which to save the key,”” just press Enter to continue.</p>\n<pre><code># Creates a new ssh key, using the provided email as a label\nssh-keygen -t rsa -C “your_email@example.com”\n</code></pre>\n<h3>ADD YOUR SSH KEY TO THE SSH-AGENT</h3>\n<p>Run the following commands to add your SSH key to the ssh-agent.</p>\n<pre><code>eval “$(ssh-agent -s)”\n</code></pre>\n<p>Next you will need to modify your ~_.ssh_config file to automatically load keys into the ssh-agent and store passphrases in your keychain:</p>\n<pre><code>Host *\n  AddKeysToAgent yes\n  UseKeychain yes\n  IdentityFile ~/.ssh/id_rsa\n</code></pre>\n<p>No matter what operating system version you run you need to run this command to complete this step:</p>\n<pre><code>ssh-add -K ~/.ssh/id_rsa\n</code></pre>\n<h3>ADDING A NEW SSH KEY TO YOUR GITHUB ACCOUNT</h3>\n<p>The last step is to let GitHub know about your SSH key. Run this command to copy your key to your clipboard:</p>\n<pre><code>pbcopy &#x3C; ~/.ssh/id_rsa.pub\n</code></pre>\n<p>Then go to GitHub and input your new SSH key. Paste your key in the “Key” textbox and pick a name that represents the computer you’re currently using.</p>\n<hr>\n<h2>Node.js</h2>\n<p>Node.js is a JavaScript runtime built on Chrome’s V8 JavaScript engine. Installing <em>node</em> with <em>brew</em> is easy, it comes with <em>npm</em> as the default package manager. Where as I prefer to use <em>yarn</em> as a package manager; for working with monorepos and such.</p>\n<p>For managing the version of node installed I use <em>n</em> it makes switching versions really easy.</p>\n<pre><code class=\"language-bash\"># Install node with brew\nbrew install node\n\n# Install yarn with npm (yep.)\nnpm install -g yarn\n\n# Install n with yarn\nyarn global add n\n\n# Install the latest *long term support* with n\nsudo n lts\n</code></pre>\n<hr>\n<h2>THEFUCK</h2>\n<p>Installation</p>\n<pre><code class=\"language-bash\">brew install thefuck\n</code></pre>\n<pre><code class=\"language-bash\">thefuck —alias | source\n</code></pre>\n<hr>\n<h2>Visual Studio Code</h2>\n<h3>EXTENSIONS</h3>\n<ul>\n<li><a href=\"https://draculatheme.com/visual-studio-code/\">Dracula Theme</a></li>\n<li><a href=\"https://marketplace.visualstudio.com/items?itemName=PKief.material-icon-theme\">Material Icon Theme by Philipp Kief</a></li>\n<li><a href=\"https://marketplace.visualstudio.com/items?itemName=dbaeumer.vscode-eslint\">ESLint by Dirk Baeumer</a></li>\n<li><a href=\"https://marketplace.visualstudio.com/items?itemName=esbenp.prettier-vscode\">Prettier by Esben Petersen</a></li>\n<li><a href=\"https://marketplace.visualstudio.com/items?itemName=mattconde.insert-relative-path\">Insert relative path by MConde</a></li>\n<li><a href=\"https://marketplace.visualstudio.com/items?itemName=flowtype.flow-for-vscode\">Flow Language Support by flowtype</a></li>\n<li><a href=\"https://marketplace.visualstudio.com/items?itemName=ericadamski.carbon-now-sh\">carbon-now-sh by Eric Adamski</a></li>\n<li><a href=\"https://marketplace.visualstudio.com/items?itemName=quicktype.quicktype\">Paste JSON as Code by quicktype</a></li>\n</ul>\n<hr>\n<h2>Ruby and Rubymine</h2>\n<pre><code class=\"language-bash\">\\curl -sSL https://get.rvm.io | bash -s stable —ruby\nsource /Users/gbjajoma/.rvm/scripts/rvm\nrvm use 2.6.3 --default\ngem install bundler\nbundle install\n</code></pre>\n<hr>\n<h2>CircleCi CLI</h2>\n<p>The CircleCI CLI is a command line interface that leverages many of CircleCI’s advanced and powerful tools from the comfort of your terminal. Some of the things you can do with the CircleCI CLI include:</p>\n<ul>\n<li>Debug and validate your CI config</li>\n<li>Run jobs locally</li>\n<li>Query CircleCI’s API</li>\n<li>Create, publish, view and manage Orbs</li>\n</ul>\n<pre><code class=\"language-bash\">brew install circleci\n</code></pre>\n<hr>\n<h2>Alias’s</h2>\n<pre><code class=\"language-bash\">alias l=\"ls -la\"       # List in long format, include dotfiles\nalias ld=\"ls -ld */\"   # List in long format, only directories\nalias ..=\"cd ..\"\nalias ...=\"cd ../..\"\nalias ....=\"cd ../../..\"\n</code></pre>","frontmatter":{"date":"January 10, 2020","path":"/setup/macbook","title":"Laptop Setup"}}},"pageContext":{}}}